"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.githubEmail = void 0;
var isomorphic_fetch_1 = __importDefault(require("isomorphic-fetch"));
/*
 * Try to find the email associated to a GitHub user account
 */
function githubEmail(opts) {
    return __awaiter(this, void 0, void 0, function () {
        var username, github, npm, recentCommits, recentActivity;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getUsername(opts)];
                case 1:
                    username = _a.sent();
                    if (!username) {
                        throw new Error('Could not find a GitHub user with the provided options. Please double check before retrying.');
                    }
                    return [4 /*yield*/, getGitHubEmail(username, opts)];
                case 2:
                    github = _a.sent();
                    return [4 /*yield*/, getNpmEmail(username)];
                case 3:
                    npm = _a.sent();
                    return [4 /*yield*/, getRecentCommitsEmails(username, opts)];
                case 4:
                    recentCommits = _a.sent();
                    return [4 /*yield*/, getRecentActivityEmails(username, opts)];
                case 5:
                    recentActivity = _a.sent();
                    return [2 /*return*/, {
                            github: github,
                            npm: npm,
                            recentCommits: recentCommits,
                            recentActivity: recentActivity
                        }];
            }
        });
    });
}
exports.githubEmail = githubEmail;
/*
 * Retrieve the GitHub username if the user ID was passed
 */
function getUsername(opts) {
    return __awaiter(this, void 0, void 0, function () {
        var response, json;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if ('username' in opts) {
                        return [2 /*return*/, opts.username];
                    }
                    return [4 /*yield*/, isomorphic_fetch_1.default("https://api.github.com/user/" + opts.id, {
                            headers: getGitHubAPIHeaders(opts.token)
                        })];
                case 1:
                    response = _a.sent();
                    if (response.status === 404) {
                        return [2 /*return*/, null];
                    }
                    return [4 /*yield*/, response.json()];
                case 2:
                    json = _a.sent();
                    return [2 /*return*/, json.login];
            }
        });
    });
}
/*
 * Get user's email from npm
 */
function getGitHubEmail(username, opts) {
    return __awaiter(this, void 0, void 0, function () {
        var response, json;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!opts.token) {
                        return [2 /*return*/, null];
                    }
                    return [4 /*yield*/, isomorphic_fetch_1.default("https://api.github.com/users/" + username, {
                            headers: getGitHubAPIHeaders(opts.token)
                        })];
                case 1:
                    response = _a.sent();
                    if (response.status === 404) {
                        return [2 /*return*/, null];
                    }
                    return [4 /*yield*/, response.json()];
                case 2:
                    json = _a.sent();
                    return [2 /*return*/, json.email || null];
            }
        });
    });
}
/*
 * Get user's email from npm
 */
function getNpmEmail(username) {
    return __awaiter(this, void 0, void 0, function () {
        var response, json;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isomorphic_fetch_1.default("https://r.cnpmjs.org/-/user/org.couchdb.user:" + username)];
                case 1:
                    response = _a.sent();
                    if (response.status === 404) {
                        return [2 /*return*/, null];
                    }
                    return [4 /*yield*/, response.json()];
                case 2:
                    json = _a.sent();
                    return [2 /*return*/, json.email || null];
            }
        });
    });
}
/*
 * Get emails listed in recent user's activity
 */
function getRecentActivityEmails(username, opts) {
    return __awaiter(this, void 0, void 0, function () {
        var recentActivityEmails, response, json, emailRegExp, initialMatch, match;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    recentActivityEmails = [];
                    return [4 /*yield*/, isomorphic_fetch_1.default("https://api.github.com/users/" + username + "/events", {
                            headers: getGitHubAPIHeaders(opts.token)
                        })];
                case 1:
                    response = _a.sent();
                    if (response.status === 404) {
                        return [2 /*return*/, recentActivityEmails];
                    }
                    return [4 /*yield*/, response.text()];
                case 2:
                    json = _a.sent();
                    emailRegExp = /"email":"([^"]*)"/gm;
                    initialMatch = emailRegExp.exec(json);
                    if (initialMatch) {
                        recentActivityEmails.push(initialMatch[1]);
                    }
                    while (emailRegExp.lastIndex !== 0) {
                        match = emailRegExp.exec(json);
                        if (match) {
                            recentActivityEmails.push(match[1]);
                        }
                    }
                    return [2 /*return*/, recentActivityEmails];
            }
        });
    });
}
/*
 * Get emails and names listed in recent user's repository commits
 */
function getRecentCommitsEmails(username, opts) {
    return __awaiter(this, void 0, void 0, function () {
        var repository, response, json, commitsEmailsMap, recentCommitsResult;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getRepository(username, opts)];
                case 1:
                    repository = _a.sent();
                    if (!repository) {
                        return [2 /*return*/, []];
                    }
                    return [4 /*yield*/, isomorphic_fetch_1.default("https://api.github.com/repos/" + username + "/" + repository + "/commits", {
                            headers: getGitHubAPIHeaders(opts.token)
                        })];
                case 2:
                    response = _a.sent();
                    if (response.status === 404) {
                        return [2 /*return*/, []];
                    }
                    return [4 /*yield*/, response.json()];
                case 3:
                    json = _a.sent();
                    if (!Array.isArray(json) || json.length === 0) {
                        return [2 /*return*/, []];
                    }
                    commitsEmailsMap = json.reduce(function (acc, commitJson) {
                        var _a = commitJson.commit, commit = _a === void 0 ? {} : _a;
                        var _b = commit.author, author = _b === void 0 ? {} : _b, _c = commit.committer, committer = _c === void 0 ? {} : _c;
                        var authorName = author.name, authorEmail = author.email, authorDate = author.date;
                        var committerName = committer.name, committerEmail = committer.email, committerDate = committer.date;
                        if (authorName && !acc.has(authorName)) {
                            acc.set(authorName, {
                                name: authorName,
                                email: authorEmail,
                                date: new Date(authorDate)
                            });
                        }
                        if (committerName && !acc.has(committerName)) {
                            acc.set(committerName, {
                                name: committerName,
                                email: committerEmail,
                                date: new Date(committerDate)
                            });
                        }
                        return acc;
                    }, new Map());
                    recentCommitsResult = __spread(commitsEmailsMap.values()).sort(function (a, b) {
                        return a.date > b.date ? -1 : 1;
                    })
                        .map(function (_a) {
                        var name = _a.name, email = _a.email;
                        return ({
                            name: name,
                            email: email
                        });
                    });
                    return [2 /*return*/, recentCommitsResult];
            }
        });
    });
}
/*
 * Get the repository on which we fetch the recent commits.
 * Use the options' one if passed, or look for the more recently updated.
 */
function getRepository(username, opts) {
    return __awaiter(this, void 0, void 0, function () {
        var response, json;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (opts.repository) {
                        return [2 /*return*/, opts.repository];
                    }
                    return [4 /*yield*/, isomorphic_fetch_1.default("https://api.github.com/users/" + username + "/repos?type=owner&sort=pushed", {
                            headers: getGitHubAPIHeaders(opts.token)
                        })];
                case 1:
                    response = _a.sent();
                    if (response.status === 404) {
                        return [2 /*return*/, null];
                    }
                    return [4 /*yield*/, response.json()];
                case 2:
                    json = _a.sent();
                    if (!Array.isArray(json) || json.length === 0) {
                        return [2 /*return*/, null];
                    }
                    return [2 /*return*/, json[0].name];
            }
        });
    });
}
/*
 * Helper to compute headers for GitHub's API
 */
function getGitHubAPIHeaders(token) {
    var authHeader = token
        ? {
            Authorization: "token " + token
        }
        : {};
    return new Headers(__assign(__assign({}, authHeader), { Accept: 'application/vnd.github.v3+json' }));
}
